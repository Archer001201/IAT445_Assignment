//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""A1P2"",
            ""id"": ""ce7425a4-feda-4151-bbbd-2fb58ae02e1e"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d767ba88-c61f-45bf-b530-8721dbe5ceca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8cf8ac0-ba5b-4ef9-a785-8ead2046956f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // A1P2
        m_A1P2 = asset.FindActionMap("A1P2", throwIfNotFound: true);
        m_A1P2_Jump = m_A1P2.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // A1P2
    private readonly InputActionMap m_A1P2;
    private List<IA1P2Actions> m_A1P2ActionsCallbackInterfaces = new List<IA1P2Actions>();
    private readonly InputAction m_A1P2_Jump;
    public struct A1P2Actions
    {
        private @InputControls m_Wrapper;
        public A1P2Actions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_A1P2_Jump;
        public InputActionMap Get() { return m_Wrapper.m_A1P2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(A1P2Actions set) { return set.Get(); }
        public void AddCallbacks(IA1P2Actions instance)
        {
            if (instance == null || m_Wrapper.m_A1P2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_A1P2ActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IA1P2Actions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IA1P2Actions instance)
        {
            if (m_Wrapper.m_A1P2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IA1P2Actions instance)
        {
            foreach (var item in m_Wrapper.m_A1P2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_A1P2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public A1P2Actions @A1P2 => new A1P2Actions(this);
    public interface IA1P2Actions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
